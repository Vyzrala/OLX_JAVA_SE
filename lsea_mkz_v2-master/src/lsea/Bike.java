package lsea;
import database.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import threads.RateArr;

import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;
import java.io.*;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import java.nio.file.StandardOpenOption;
import java.util.*;




/**
 * Class that extends Item abstract class<br>
 * It is class about bikes<br>
 * implements Comparator interface, Serializable<br>
 * All setters and getters are automatically generated by lombok.<br>
 * NoArgsConstructor is also generated automatically.<br>
 * @TODO New methods
 * @author Patryk Dunajewski
 *
 */
@Getter @Setter @NoArgsConstructor
public class Bike extends Item implements Comparator<Bike>,Serializable{

    /*** gear ->  Number of gears (private int)*/
    private int gear;
    /*** frame ->  Type of frame(private Frame(enum type:carbon,steel,aluminum,magnesium,titanium))*/
    private Frame frame;
    /*** lights ->  Does it have lights(1-has,0-does not) (private int)*/
    private int are_lights;
    /*** bell ->  Does it have bell(1-has,0-does not) (private int)*/
    private int is_bell;
    /*** breaks ->  Does it have working breaks(1-has,0-does not)(private int)*/
    private int are_breaks;

    /**
     * Basic constructor with given attributes, used in load, save and creating offers of the bike
     * @param title name of an object (protected String)
     * @param brand name of a brand of the object (protected String)
     * @param is_auction do you want to have auction or buy now (protected int)
     * @param price price in PLN(protected float)
     * @param weight weight of the object in Kg(protected float)
     * @param account reference to User that poses this item(protected LSEA)
     * @param is_available is it still available. After buying an object it becomes 0. And when it is available it is 1 (protected int)
     * @param gear number of gears (private int)
     * @param frame type of frame(private Frame(enum type:carbon,steel,aluminum,magnesium,titanium))
     * @param are_lights does it have lights(1-has,0-does not) (private int)
     * @param is_ does it have bell(1-has,0-does not) (private int)
     * @param are_breaks does it have working breaks(1-has,0-does not)(private int)
     */
    public Bike(String title, String brand, int is_auction, float price, float weight, LSEA account,
                int is_available, int gear, Frame frame, int are_lights, int is_,int are_breaks){
        super(title,brand,is_auction,price,weight,account,is_available);
        this.gear = gear;
        this.frame = frame;
        this.are_lights = are_lights;
        this.is_bell = is_;
        this.are_breaks = are_breaks;
    }

    /**
     * CreateOfferBike method creating an offer of a bike. This is one of the most important methods in this class.
     * @param account list of all accounts (type LSEA)
     * @param eM instance of entity Manager, needed for transactions
     * @param db_H object of class necessary for database handling
     * @return constructor of the Bike class (type Bike)
     */
    public Bike createOfferBike(LSEA account, EntityManager eM, DB_Handling db_H) {
        String nameOI, brand, frames;
        Frame frame;
        int is_auction, gear, are_lights, is_bell, are_breaks;
        float price, weight;

        Scanner S = new Scanner(System.in);
        System.out.println("New offer will be created.");
        System.out.println("Name of item: ");
        nameOI = S.nextLine();
        System.out.println("Brand: ");
        brand = S.nextLine();
        while(true) {
            System.out.println("(carbon,steel,aluminum,magnesium,titanium) Type of frame: ");
            frames = S.nextLine();
            if(Frame.contains(frames)) {
                frame = Frame.valueOf(frames);
                break;
            }
            else {System.out.println("Wrong type!!");}
        }
        System.out.println("Do you want to have auction: (1-true/0-false)");
        is_auction = Integer.parseInt(S.nextLine());
        System.out.println("Price: ");
        price = Float.parseFloat(S.nextLine());
        System.out.println("Weight: ");
        weight = Float.parseFloat(S.nextLine());
        System.out.println("Number of gears: ");
        gear = Integer.parseInt(S.nextLine());
        System.out.println("Does it have lights(1-yes/0-no): ");
        are_lights = Integer.parseInt(S.nextLine());
        System.out.println("Does it have bell(1-yes/0-no): ");
        is_bell = Integer.parseInt(S.nextLine());
        System.out.println("Does it have working breaks(1-yes/0-no): ");
        are_breaks = Integer.parseInt(S.nextLine());

        DB_Profile profile = eM.getReference(DB_Profile.class,db_H.getDbP().size());
        DB_Frame fr = new DB_Frame();
        for(int i=0; i<db_H.getDbF().size(); i++){
            if(Frame.valueOf(db_H.getDbF().get(i).getMaterial()) == frame) {
                fr = eM.getReference(DB_Frame.class, db_H.getDbF().get(i).getFrameID());
                break;
            }
        }
        DB_Bike bike = new DB_Bike(nameOI,brand,is_auction,price,weight,profile,1,gear,fr,are_lights,is_bell,are_breaks);
        db_H.getDbB().add(bike);
        EntityTransaction tx = eM.getTransaction();
        tx.begin();
        eM.persist(bike);
        tx.commit();

        System.out.println("Bike offer was successfully created.");
        return new Bike(nameOI,brand,is_auction,price,weight,account,1,gear,frame,are_lights,is_bell,are_breaks);
    }

    /*** Basic method checking information about given item*/
    @Override public void getInfo() {
        if(this.getIs_available() != 0) {
            System.out.println("Name of item: " + this.getNameOI());
            System.out.println("Brand: " + this.getBrand());
            System.out.println("Is is an auction: " + this.getIs_auction());
            System.out.println("Price: " + this.getPrice()+" PLN");
            System.out.println("Weight: " + this.getWeight()+" Kg");
            System.out.println("Owner nick: " + this.getAccount().getNick());
            System.out.println("Number of gears: " + this.getGear());
            System.out.println("Type of frame: " + this.getFrame());
            System.out.println("Does it have lights(1-yes/0-no): " + this.getAre_lights());
            System.out.println("Does it have bell(1-yes/0-no): " + this.getIs_bell());
            System.out.println("Does it have working breaks(1-yes/0-no): " + this.getAre_breaks());
        }
        else System.out.println("Bike is not available");
    }

    /**
     * This is some method that is showing if all of gadgets in bikes are available, to its price is added 100 PLN<br>
     * If not if is subtracted 100 if the price is bigger than 100 or set 0 if it is less
     */
    public void checkBike() {
        if((this.getIs_bell() == 1) & (this.getAre_lights() == 1) &(this.getAre_breaks() == 1)) {
            this.setPrice(this.getPrice() + 100);
        }
        else {
            if(this.getPrice() >= 100) this.setPrice(this.getPrice() - 100);
            else this.setPrice(0);
        }
    }

    /**
     * method to buy the items<br>
     * 1. Item is available and affordable + deep cloning the old offer and copy it to backup list<br>
     * 2. Item is available but not affordable<br>
     * 3. Item is not available<br>
     * @TODO In future there would be also auction so we can change the price
     * @param account list with all of the accounts (type LSEA)
     * @throws CloneNotSupportedException
     */
    public Bike buyItem(LSEA account) throws CloneNotSupportedException {
        if(this.getIs_available() == 1) {
            if(account.getMoney() >= this.getPrice()) {
                Bike temp = (Bike) this.clone();
                account.setMoney(account.getMoney() - this.getPrice());
                this.getAccount().setMoney(this.getAccount().getMoney() + this.getPrice());
                this.setAccount(account);
                this.setIs_available(0);
                System.out.println("Successfully bought an item");
                return temp;
            }
            else System.out.println("You don't have enough money");
        }
        else System.out.println("This item in not available any more");
        return this;
    }

    /**
     * Main just to check methods from bike class
     * It is just for testing some class methods
     */
    public static void main(String[] args) {
        List<LSEA>profiles = new ArrayList<>();
        List<Bike>bikes = new ArrayList<>();
        LSEA newObject = new LSEA();
        profiles = newObject.load("profiles");
        Bike nBike = new Bike();
        bikes = nBike.genBikes(profiles);
        //rateArray=Bike.rateBikes(bikes);
    }

    /*** save from Item class*/
    public void save() {}

    /**
     * overloaded save from Item class
     * @param db_H object of class necessary for database handling
     * @param bikes list of all offers of bikes(List<Bike>)
     */
    public void save(DB_Handling db_H, List<Bike>bikes, String uPath) {
        File file = new File(uPath + ".txt");
        try {
            FileChannel fc = FileChannel.open(file.toPath(), StandardOpenOption.CREATE, StandardOpenOption.WRITE);
            FileLock fl = fc.tryLock();
            FileWriter output = new FileWriter(file);
            if(fl != null) {
                System.out.println("File is locked");
                for (int i = 0; i < bikes.size(); i++) {
                    int flag = -1;
                    if (bikes.get(i).getAccount() != null) {
                        output.write(bikes.get(i).getNameOI() + "\n");
                        output.write(bikes.get(i).getBrand() + "\n");
                        output.write(bikes.get(i).getIs_auction() + "\n");
                        output.write(bikes.get(i).getPrice() + "\n");
                        output.write(bikes.get(i).getWeight() + "\n");
                        for (int j = 0; j < db_H.getDbB().size(); j++) {
                            if (db_H.getDbB().get(j).getAccount().getNick() == bikes.get(i).getAccount().getNick()) {
                                flag = db_H.getDbB().get(j).getAccount().getId();
                                output.write(flag + "\n");
                                break;
                            }
                        }
                        if (flag == -1) {
                            output.write((db_H.getDbP().size() + 1) + "\n");
                        }
                        output.write(bikes.get(i).getIs_available() + "\n");
                        output.write(bikes.get(i).getGear() + "\n");
                        for (int j = 0; j < db_H.getDbB().size(); j++) {
                            if (Frame.valueOf(db_H.getDbB().get(j).getFrame().getMaterial()) == bikes.get(i).getFrame()) {
                                flag = db_H.getDbB().get(j).getFrame().getFrameID();
                                output.write(flag + "\n");
                                break;
                            }
                        }
                        output.write(bikes.get(i).getAre_lights() + "\n");
                        output.write(bikes.get(i).getIs_bell() + "\n");
                        output.write(bikes.get(i).getAre_breaks() + "\n");
                    }
                }
                fl.release();
                System.out.println("File is unlocked");
                System.out.println("Data were saved to Txt file");
            }
            output.close();
        }catch(IOException ex) {System.out.print(ex.getMessage());}
    }

    /**
     * Loading values from the .txt file
     * @param db_H object of class necessary for database handling
     * @param profiles list of all accounts (type LSEA)
     * @return list with bikes (type Bikes)
     */
    public ArrayList<Bike> loadBikeDB(DB_Handling db_H, List<LSEA> profiles){
        ArrayList<Bike>bikes = new ArrayList<>();
        ArrayList<DB_Bike> dbB = db_H.getDbB();
        String nameOI, brand,account;
        Frame frame;
        int auction,gear,lights,bell,breaks,available;
        float price, weight;
        for(int i=0; i<dbB.size(); i++){
            int flag = -1;
            nameOI = dbB.get(i).getTitle();
            brand = dbB.get(i).getBrand();
            auction = dbB.get(i).getIs_auction();
            price = dbB.get(i).getPrice();
            weight = dbB.get(i).getWeight();
            account = dbB.get(i).getAccount().getNick();
            available = dbB.get(i).getIs_available();
            gear = dbB.get(i).getGear();
            frame = Frame.valueOf(dbB.get(i).getFrame().getMaterial());
            lights = dbB.get(i).getAre_lights();
            bell = dbB.get(i).getIs_bell();
            breaks = dbB.get(i).getAre_breaks();
            for (int j=0; j<profiles.size(); j++) {
                if(profiles.get(j).getNick().contains(account))
                {
                    flag = j;
                    break;
                }
            }
            if(flag!=-1){
                bikes.add(new Bike(nameOI,brand,auction,price,weight,profiles.get(flag),available,gear,frame,lights,bell,breaks));
            }
        }
        return bikes;
    }

    /**
     * Loading values from the .txt file
     * @param profiles list of all accounts (type LSEA)
     * @return list with bikes (type Bikes)
     */
    public List<Bike> load(List<LSEA> profiles){
        List<Bike>bikes = new ArrayList<Bike>();
        File file = new File("bikes.txt");
        String nameOI, brand,account;
        Frame frame;
        int auction,gear,lights,bell,breaks,available,flag=-1;
        float price, weight;
        try {
            Scanner input = new Scanner(file);
            while(input.hasNextLine()) {
                nameOI = input.nextLine();
                brand = input.nextLine();
                auction = Integer.parseInt(input.nextLine());
                price = Float.parseFloat(input.nextLine());
                weight = Float.parseFloat(input.nextLine());
                account = input.nextLine();
                available = Integer.parseInt(input.nextLine());
                gear = Integer.parseInt(input.nextLine());
                frame = Frame.valueOf(input.nextLine());
                lights = Integer.parseInt(input.nextLine());
                bell = Integer.parseInt(input.nextLine());
                breaks = Integer.parseInt(input.nextLine());
                for (int i=0; i<profiles.size(); i++) {
                    if(profiles.get(i).getNick().contains(account)){
                        flag = i;
                        break;
                    }
                }
                if(flag!=-1){
                    //when there is the person that poses this item
                    bikes.add(new Bike(nameOI,brand,auction,price,weight,profiles.get(flag),available,gear,frame,lights,bell,breaks));
                }
            }
            input.close();
        }catch(IOException ex){System.out.print(ex.getMessage());}
        return bikes;

    }

    /**
     * Method that is used to generate 25 200 000 bikes offers. This list is used to multithreading rating the bikes offers
     * @param profiles list of all accounts (type LSEA)
     * @return list with bikes (type Bikes)
     */
    public List<Bike> genBikes(List<LSEA> profiles){
        List<Bike>bikes = new ArrayList<Bike>();
        String nameOI, brand;
        Frame frame;
        int auction,gear,lights,bell,breaks,available,account;
        float price, weight;
        Random rand = new Random();
        for(int i=0; i<25200000; i++) {
            nameOI = "Test_"+ i;
            brand = "Bikeos";
            auction = rand.nextInt(2);
            price = (float)(rand.nextInt(1000000)/100.0);
            weight = (float)(rand.nextInt(100000)/1000.0);
            account = rand.nextInt(profiles.size());
            available = rand.nextInt(2);
            gear = 1 + rand.nextInt(10);
            frame = Frame.valueOf("carbon");
            lights = rand.nextInt(2);
            bell = rand.nextInt(2);
            breaks = rand.nextInt(2);
            bikes.add(new Bike(nameOI,brand,auction,price,weight,profiles.get(account),available,gear,frame,lights,bell,breaks));
        }
        return bikes;
    }

    /**
     * This is the method that is used in multithreading<br>
     * rateBikes method rates bikes by:<br>1. Checking the price (for each 10 times more rate=-1 starting from <1 and 5<br>
     *  2.Checking the weight of the bike. Same as in the price but starting with <1 and 3<br>
     *  3.Checking number of gears. rate +=number of gears/2 and round it to get integer value<br>
     *  4.Multiplying rate by 2 depending if it has auction, working lights, bell and working breaks<br>
     *  After all we sum it up and it is a rate of the bike. The bigger the better.<br>
     *  In ThreadOne class all those offers are added into 5 different lists, basing on the rate value.
     */
    public RateArr rateBikes() {
        int rate = 0;
        if(this.getPrice() < 1) rate += 5;
        else if(this.getPrice() < 10) rate += 4;
        else if(this.getPrice() < 100) rate += 3;
        else if(this.getPrice() < 1000) rate += 2;
        else if(this.getPrice() < 10000) rate += 1;
        if(this.getWeight() < 1) rate += 3;
        else if(this.getWeight() < 10) rate += 2;
        else if(this.getWeight() < 100) rate += 1;
        rate += Math.round(this.getGear()/2);
        if(this.getIs_auction() == 1) rate *= 2;
        if(this.getAre_lights() == 1) rate *= 2;
        if(this.getIs_bell() == 1) rate *= 2;
        if(this.getAre_breaks() == 1) rate *= 2;
        return new RateArr(this,rate);
    }

    /*** override of the method compare from the Comparator<Bike> interface
     *@param o1 Bike object
     *@param o2 Another Bike object
     *@return result 1/-1 to sort*/
    @Override
    public int compare(Bike o1, Bike o2) {
        int result = o1.getNameOI().compareTo(o2.getNameOI());
        if(result == 0) {
            if(o1.getPrice() > o2.getPrice()) result = -1;
            else result = 1;
        }
        return result;
    }

    /*** deep cloning
     * @return bike, which is clone of bike class object with LSEA addition */
    @Override
    protected Object clone() throws CloneNotSupportedException {
        Bike bike = (Bike) super.clone();
        bike.account = (LSEA) account.clone();
        return bike;
    }

    /*** overriding toString method to print values from the class*/
    @Override
    public String toString() {
        return "Bike [nameOI=" + nameOI + ", brand=" + brand + ", auction=" + is_auction + ", price=" + price + ", weight="
                + weight + ", acc=" + account.getName() + ", available=" + is_available + ", gear=" + gear +
                ", frame=" + frame + ", lights=" + are_lights + ", bell=" + is_bell + ", breaks=" + are_breaks + "]";
    }
}
