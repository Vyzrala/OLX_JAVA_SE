package lsea;
import TCP.*;
import UDP.*;
import database.*;
import lombok.*;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.io.*;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import java.nio.file.StandardOpenOption;

/**
 * LSEA class is the main class for my application. At the beginning user has to create his account.<br>
 * After creating account or login in(in the future), user can: <br>
 * see the list of car or bikes offers<br>
 * make car or bike offer<br>
 * buy car or bike<br>
 * get info about his/her account.<br>
 * Implements Comparable<LSEA> interface to sort profiles list<br>, Serializable
 * Multithreading rating bikes offers and adding to one of five lists<br>
 * All setters and getters are automatically generated by lombok.<br>
 * Both NoArgsConstructor constructor and AllArgsConstructor constructor are also generated automatically.<br>
 * Additionally lombok is used for overwriting ToString method.
 *
 * @TODO private float mark; will be added. mark of the user 1-5 (5 - trustworthy)<br>
 * @TODO in later parts of the project all of the users will be in the database, every user has his/her own account with unique nick and password<br>
 * @TODO Each user has her/his marks and comments in array, which will be added in later versions of the program<br>
 * @TODO Array with all items that this person is selling in given time<br>
 *
 * @author Patryk Dunajewski
 *
 * @version 1.6.7
 * @since 1.1.1
 *
 */
@Getter @Setter @NoArgsConstructor @AllArgsConstructor
public class LSEA implements Comparable<LSEA>, Cloneable, Serializable{

    /**
     *  nick -> unique nick like mrPatrick98 (private, string value)<br>
     *  password -> password (without any restriction) (private, string value)<br>
     *  name -> name of the user (private, string value)<br>
     *  surname -> surname of the user (private, string value)<br>
     */
    private String nick, password, name, surname;
    /*** age -> age of the user, can also be done with date (private, int value)*/
    private int age;
    /*** money -> for the beginning of the project all of the users must insert how much money they have (private, float value)*/
    private float money;
    /**
     * bPath -> default path to binary file<br>
     * tPath -> default path to txt files
     */
    private final String bPath = "data/profilesB", tPath= "data/profiles", dPath="data/Items";

    /**
     * Method which is used to create profiles of the users at the beginning. User has to give basic data.<br>
     * At the end there is a constructor, which will create instance of our user.<br>
     * @TODO Add loginToApplication method
     * @param profiles it is a list with all of the profiles in the database(type List<LSEA>). Application needs this to check if given nick is unique.
     * @param eM instance of entity Manager, needed for transactions
     * @param db_H object of class necessary for database handling
     * @return Object of a LSEA class
     */
    public LSEA createProfile(List<LSEA> profiles, EntityManager eM, DB_Handling db_H) {
        String nick = "", password, name, surname;
        int age;
        float money;
        int flag = 1;
        Scanner S = new Scanner(System.in);
        System.out.println("New account will be created.");
        while(flag == 1) {
            flag = 0;
            System.out.print("Nick: ");
            nick = S.nextLine();
            for(int i=0; i<profiles.size(); i++) {
                if(profiles.get(i).getNick().contains(nick)){
                    flag = 1;
                    System.out.println("Account with this nick already exists.");
                    break;
                }
            }
        }
        System.out.println("Password: ");
        password = S.nextLine();
        System.out.println("Name: ");
        name = S.nextLine();
        System.out.println("Surname: ");
        surname = S.nextLine();
        System.out.println("Age: ");
        age = Integer.parseInt(S.nextLine());
        System.out.println("Money: ");
        money = Float.parseFloat(S.nextLine());
        DB_Profile prof = new DB_Profile(nick,password,name,surname,age,money);
        db_H.getDbP().add(prof);
        EntityTransaction eT = eM.getTransaction();
        eT.begin();
        eM.persist(prof);
        eT.commit();
        System.out.println("Account was successfully created.");
        return new LSEA(nick,password,name,surname,age,money);
    }

    /**
     * Basic information about user/account:<br>
     * nick<br>
     * name<br>
     * surname<br>
     * age<br>
     * @TODO add list with all items that this account poses, mark of this account and comments
     */
    public void getInfo() {
        System.out.println("Nick: " + this.getNick());
        System.out.println("Name: " + this.getName());
        System.out.println("Surname: " + this.getSurname());
        System.out.println("Age: " + this.getAge());
    }

    /**
     * Main main<br>
     * 1. Creating 3 lists for profiles,cars and bikes and 2 backup lists carTrans ,bikeTrans to see previous owners,
     * (Turned off) creating 5 lists for bike offers with rates<br>
     * 2. loading into those lists data from .txt, .bin or .dat files<br>
     * 3. Creating your profile. In future there will be option to Login <br>
     * 4. Menu <br>
     * 5. Saving all data into the .txt , .bin or .dat files<br>
     * @throws CloneNotSupportedException
     * @throws InterruptedException
     * @throws IOException
     * @throws ClassNotFoundException
     */
    public static void main(String[] args) throws CloneNotSupportedException, IOException, ClassNotFoundException {
        Scanner S = new Scanner(System.in);
        //Two flags
        int choose = -1;
        String wait;
        List<Bike> bikes = new ArrayList<>();
        List<LSEA>profiles = new ArrayList<>();
        List<Car>cars = new ArrayList<Car>();
        List<Bike> bikeTrans = new ArrayList<>();
        List<Car>carTrans = new ArrayList<>();

        //Inserting data to database from txt files;
        DB_Handling db_H = new DB_Handling();
        EntityManagerFactory eMF = Persistence.createEntityManagerFactory("DataBaseP");
        EntityManager entityManager = eMF.createEntityManager();
        db_H.loadProfiles("data/profiles", entityManager);
        db_H.loadFrames("data/frames", entityManager);
        db_H.loadCars("data/cars", entityManager);
        db_H.loadBikes("data/bikes", entityManager);

		/* Multithreading
		List<Thread>threads=new ArrayList<Thread>();
		List<RateArr>rateListA= new ArrayList<RateArr>();
		List<RateArr>rateListB= new ArrayList<RateArr>();
		List<RateArr>rateListC= new ArrayList<RateArr>();
		List<RateArr>rateListD= new ArrayList<RateArr>();
		List<RateArr>rateListE= new ArrayList<RateArr>();
		ALRates ratesA= new ALRates(rateListA);
		ALRates ratesB= new ALRates(rateListB);
		ALRates ratesC= new ALRates(rateListC);
		ALRates ratesD= new ALRates(rateListD);
		ALRates ratesE= new ALRates(rateListE);*/

        LSEA newObject= new LSEA();
        Client_TCP client_TCP = new Client_TCP();
        Client_UDP client_UDP = new Client_UDP();
        Server_TCP server_TCP = new Server_TCP();
        Server_UDP server_UDP = new Server_UDP();

        profiles=newObject.loadDB(db_H);
        Bike nBike = new Bike();
        Car nCar = new Car();
        cars=nCar.loadCarDB(db_H,profiles);
        bikes=nBike.loadBikeDB(db_H,profiles);

        Collections.sort(profiles);
        Collections.sort(bikes, nBike);
        Collections.sort(cars, nCar);

        newObject=newObject.createProfile(profiles, entityManager, db_H);
        profiles.add(newObject);

        /* Multithreading
         * ThreadOne tmp = new ThreadOne(); for(int i=0;i<tmp.getNumberThreads();i++) {
         * ThreadOne t = new ThreadOne(bikes,i,ratesA,ratesB,ratesC,ratesD,ratesE);
         * Thread thread= new Thread(t); threads.add(thread); }
         */
        //long start = System.currentTimeMillis();
        /*
         * for(int i=0;i<threads.size();i++) { threads.get(i).start();
         *
         * } for(int i=0;i<threads.size();i++) { threads.get(i).join(); }
         */
        /*
         * long end = System.currentTimeMillis(); long duration = end-start;
         * System.out.println(duration);
         */
        System.out.println("Welcome to ZOLX");
        OUTER:
        while(true) {
            System.out.println("Here are your options:");
            System.out.println("0 - quit");
            System.out.println("1 - cars offers");
            System.out.println("2 - bikes offers");
            System.out.println("3 - make car offer");
            System.out.println("4 - make bike offer");
            System.out.println("5 - buy car");
            System.out.println("6 - buy bike");
            System.out.println("7 - info about your account");
            System.out.println("8 - info about previous car transactions");
            System.out.println("9 - info about previous bike transactions");
            System.out.println("10 - TCP server");
            System.out.println("11 - TCP client");
            System.out.println("12 - UDP server");
            System.out.println("13 - UDP client");
            System.out.println("14 - Delete bike by brand");
            System.out.println("15 - Change password to your account");
            System.out.println("16 - Run the query");
            //System.out.println("10-info about sizes of all of the rateBike lists and listA printed");
            wait = S.nextLine();
            switch(wait){
                case "0":
                    break OUTER;
                case "1":
                    for(int i=0; i<cars.size(); i++) {
                        System.out.println(i+1 + ".");
                        cars.get(i).getInfo();
                        System.out.println("");
                    }
                    break;
                case "2":
                    for(int i=0; i<bikes.size(); i++) {
                        System.out.println(i+1 + ".");
                        bikes.get(i).getInfo();
                        System.out.println("");
                    }
                    break;
                case "3":
                    cars.add(nCar.createOfferCar(newObject, entityManager, db_H));
                    Collections.sort(cars, nCar);
                    break;
                case "4":
                    bikes.add(nBike.createOfferBike(newObject, entityManager, db_H));
                    Collections.sort(bikes, nBike);
                    break;
                // deep cloning 5 and 6 (buyItem() method in Bike and Car class)
                case "5":
                    System.out.println("Which car would you like to buy (number): ");
                    choose = Integer.parseInt(S.nextLine());
                    if(choose < cars.size()) {
                        carTrans.add(cars.get(choose).buyItem(newObject));
                        if(carTrans.get(carTrans.size() - 1).getAccount().getName() == cars.get(choose).getAccount().getName()) {
                            carTrans.remove(carTrans.size()-1);
                        }
                    }
                    else {
                        System.out.println("The number you gave is incorrect");
                    }
                    break;
                case "6":
                    System.out.println("Which bike would you like to buy (number): ");
                    choose = Integer.parseInt(S.nextLine());
                    if(choose < bikes.size()) {
                        bikeTrans.add(bikes.get(choose).buyItem(newObject));
                        if(bikeTrans.get(bikeTrans.size() - 1).getAccount().getName() == bikes.get(choose).getAccount().getName()) {
                            bikeTrans.remove(bikeTrans.size()-1);
                        }
                    }
                    else {
                        System.out.println("The number you gave is incorrect");
                    }
                    break;
                case "7":
                    newObject.getInfo();
                    break;
                //8 and 9th are deep cloning ex. Those are the lists of clones of object in backup list and search in list of offers
                //for the same offer. List of all transactions done and not done, but presents only done
                case "8":
                    for(int i=0; i<carTrans.size(); i++) {
                        for(int j=0; j<cars.size(); j++) {
                            if(carTrans.get(i).getNameOI() == cars.get(j).getNameOI()) {
                                System.out.println(i+1 + ".");
                                System.out.println("Old: ");
                                carTrans.get(i).getInfo();
                                System.out.println("New: ");
                                System.out.println(cars.get(j).toString());
                            }
                        }
                    }
                    break;
                case "9":
                    for(int i=0; i<bikeTrans.size(); i++) {
                        for(int j=0; j<bikes.size(); j++) {
                            if(bikeTrans.get(i).getNameOI() == bikes.get(j).getNameOI()) {
                                System.out.println(i+1 + ".");
                                System.out.println("Old: ");
                                bikeTrans.get(i).getInfo();
                                System.out.println("New: ");
                                System.out.println(bikes.get(j).toString());
                            }
                        }
                    }
                    break;
                case "10":
                    server_TCP.TCP_receive(profiles);
                    break;
                case "11":
                    client_TCP.TCP_send(profiles);
                    break;
                case "12":
                    server_UDP.receiveUDP(profiles);
                    break;
                case "13":
                    client_UDP.send_UDP(profiles);
                    break;
                case "14":
                    System.out.println("Type in brand name that you want to delete from database");
                    String brandName = S.nextLine();
                    for(int i=0; i<=bikes.size()-1; i++){
                        if(bikes.get(i).getBrand().equals(brandName)){
                            bikes.remove(i);
                            i = 0;
                        }
                    }
                    db_H.deleteBikeBrand(brandName, entityManager);
                    break;
                case "15":
                    System.out.println("Type in new password");
                    String newPass1 = S.nextLine();
                    System.out.println("Confirm new password");
                    String newPass2 = S.nextLine();
                    if(newPass1.equals(newPass2)){
                        profiles.get(profiles.size() - 1).setPassword(newPass1);
                        db_H.updatePassword(newPass1, entityManager);
                        System.out.println("Password changed successfully");
                    }
                    else System.out.println("Passwords didn't match");
                    break;
                case "16":
                    System.out.println("Type in parameters to the following query");
                    System.out.println("SELECT p FROM DB_Profile p WHERE p.age > PARAMETER_1 AND p.money < PARAMETER_2");
                    System.out.print("PARAMETER_1: ");
                    try {
                        int parameter_1 = Integer.parseInt(S.nextLine());
                        System.out.print("PARAMETER_2: ");
                        float parameter_2 = Float.parseFloat(S.nextLine());
                        db_H.query(entityManager, parameter_1, parameter_2);
                    }
                    catch(NumberFormatException e){
                        System.out.println("Wrong type of input");
                    }
                    break;
					/*
					//Multithreading checking
				case 10:
					System.out.println("Size of list A: " +ratesA.getList().size());
					System.out.println("Size of list B: " +ratesB.getList().size());
					System.out.println("Size of list C: " +ratesC.getList().size());
					System.out.println("Size of list D: " +ratesD.getList().size());
					System.out.println("Size of list E: " +ratesE.getList().size());
					for(int i=0;i<ratesA.getList().size();i++) {
						System.out.println(i+".");
						ratesA.getList().get(i).getBike().getInfo();
						System.out.println("Rate: " +ratesA.getList().get(i).getRate());
						System.out.println("");
					}
					break;
					*/
                default:
                    System.out.println("Incorrect variable.");
            }
        }

        newObject.save(profiles,"data/profiles");
        nCar.save(db_H,cars,"data/cars");
        nBike.save(db_H,bikes,"data/bikes");

        S.close();
    }

    /**
     * Basic save method where we save our profiles from the list to the .txt file.
     *
     * @param profiles it is a list with all of the profiles in the database(type List<LSEA>).
     * @param uPath Path of the file(String)
     */
    public void save(List<LSEA> profiles, String uPath) {
        File file = new File(uPath + ".txt");
        try {
            FileChannel fc = FileChannel.open(file.toPath(), StandardOpenOption.CREATE, StandardOpenOption.WRITE);
            FileLock fl = fc.tryLock();
            FileWriter output = new FileWriter(file);
            if(fl != null) {
                System.out.println("File is locked");
                for(int i=0; i<profiles.size(); i++) {
                    output.write(profiles.get(i).getNick() + "\n");
                    output.write(profiles.get(i).getPassword() + "\n");
                    output.write(profiles.get(i).getName() + "\n");
                    output.write(profiles.get(i).getSurname() + "\n");
                    output.write(profiles.get(i).getAge() + "\n");
                    output.write(profiles.get(i).getMoney() + "\n");
                }
                fl.release();
                System.out.println("File is unlocked");
                System.out.println("Data were saved to Txt file");
            }
            output.close();
        }catch(IOException ex){
            System.out.print(ex.getMessage());
        }
    }

    /**
     * SaveB is the method that saves data into binary file.<br>
     * It is used in the main. User has an option to:<br>1. load from text or binary file <br>2. save to text or binary file
     * @param profiles list of all profiles that will be saved into binary file
     * @param uPath Path of the file(String)
     */
    public void saveB(List<LSEA>profiles,String uPath){
        File file = new File(uPath + ".bin");
        try {
            FileOutputStream fos = new FileOutputStream(file);
            FileLock fl = fos.getChannel().tryLock();
            ObjectOutputStream os = new ObjectOutputStream(fos);
            if(fl != null) {
                System.out.println("File is locked");
                for(int i =0; i<profiles.size(); i++) {
                    os.writeBytes(profiles.get(i).getNick() + "\n");
                    os.writeBytes(profiles.get(i).getPassword() + "\n");
                    os.writeBytes(profiles.get(i).getName() + "\n");
                    os.writeBytes(profiles.get(i).getSurname() + "\n");
                    os.writeInt(profiles.get(i).getAge());
                    os.writeFloat(profiles.get(i).getMoney());
                }
                TimeUnit.SECONDS.sleep(5);
                fl.release();
                System.out.println("File is unlocked");
                System.out.println("Data were saved to binary file");
            }
            os.close();
        }catch (IOException | InterruptedException ex){
            System.out.print(ex.getMessage());
        }
    }

    /**
     * Load method that loads data from database.
     *
     * @param db_H object of class necessary for database handling
     * @return list with profiles
     */
    public List<LSEA> loadDB(DB_Handling db_H){
        List<LSEA>profiles =new ArrayList<>();
        String nick, password, name, surname;
        int age;
        float money;
        ArrayList<DB_Profile> dbP = db_H.getDbP();
        for(int i=0; i<db_H.getDbP().size(); i++){
            nick = dbP.get(i).getNick();
            password = dbP.get(i).getPassword();
            name = dbP.get(i).getName();
            surname = dbP.get(i).getSurname();
            age = dbP.get(i).getAge();
            money = dbP.get(i).getMoney();
            profiles.add(new LSEA(nick,password,name,surname,age,money));
        }
        return profiles;
    }
    /**
     * Basic load method from profiles.txt which is our temporary database.
     *
     * @param uPath Path of the file(String)
     * @return List<LSEA> whit all account in the database
     */
    public List<LSEA> load(String uPath){
        List<LSEA>profiles =new ArrayList<>();
        File file = new File(uPath+".txt");
        String nick, password, name, surname;
        int age;
        float money;
        try {
            Scanner input = new Scanner(file);
            while(input.hasNextLine()) {
                nick=input.nextLine();
                password=input.nextLine();
                name=input.nextLine();
                surname=input.nextLine();
                age=Integer.parseInt(input.nextLine());
                money=Float.parseFloat(input.nextLine());
                profiles.add(new LSEA(nick,password,name,surname,age,money));
            }
            input.close();
        }catch(IOException ex){System.out.print(ex.getMessage());}
        return profiles;
    }

    /**
     * Binary load method. <br>
     * Profiles listed is created at the begining of the method, than all the data are added to the list and this list is returned.
     *
     * @param uPath Path of the file(String)
     * @return profiles -> List with all profiles
     */
    public List<LSEA> loadB(String uPath){
        List<LSEA>profiles =new ArrayList<>();
        File file = new File (uPath+".bin");
        try {
            FileInputStream fis = new FileInputStream(file);
            ObjectInputStream is = new ObjectInputStream(fis);
            while(is.available() != 0)
            {
                String nick = is.readLine();
                String password = is.readLine();
                String name = is.readLine();
                String surname = is.readLine();
                int age = is.readInt();
                float money = is.readFloat();
                profiles.add(new LSEA(nick,password,name,surname,age,money));
            }
            is.close();

        } catch (IOException ex){
            System.out.print(ex.getMessage());
        }
        return profiles;
    }

    /**
     * Override of the method compareTo from interface Comparable<LSEA>
     *
     * @param o LSEA object (one of the profiles)
     * @return result 1/-1 to sort (there can not be two the same nicks)
     */
    @Override
    public int compareTo(LSEA o) {
        int result =this.getNick().compareTo(o.getNick());
        return result;
    }

    /*** shallow cloning
     * @return LSEA clone */
    @Override
    protected Object clone() throws CloneNotSupportedException {
        return super.clone();
    }

    /*** overriding toString method to print values from the class*/
    @Override
    public String toString() {
        return "LSEA [nick=" + nick + ", password=" + password + ", name=" + name + ", surname=" + surname + ", age="
                + age + ", money=" + money + "]";
    }
}
